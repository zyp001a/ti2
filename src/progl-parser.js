/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,22],$Va=[1,23],$Vb=[1,20],$Vc=[1,26],$Vd=[1,27],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,5,20,27,29,32,42,43,45,46,47,48,49,50,51,52,53,54,55],$Vs=[1,5,19,20,25,26,27,29,32,42,43,45,46,47,48,49,50,51,52,53,54,55],$Vt=[1,55],$Vu=[1,5,20,26,27,29,32,42,43,45,46,47,48,49,50,51,52,53,54,55],$Vv=[1,5,20,27,29,32],$Vw=[1,85],$Vx=[5,20,27,29],$Vy=[1,98],$Vz=[1,97],$VA=[1,95],$VB=[1,5,20,27,29,32,42,43,46,47,48,49,50,51,52,53,54,55],$VC=[1,5,20,27,29,32,42,43,46,47,50,51,52,53,54,55],$VD=[1,5,20,27,29,32,42,43,50,51,52,53,54,55],$VE=[1,5,19,20,27,29,32,42,43,45,46,47,48,49,50,51,52,53,54,55],$VF=[6,7,8,9,18,19,21,22,23,24,26,28,34,44],$VG=[1,108],$VH=[5,20];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Start":3,"Raw":4,",":5,"Number":6,"String":7,"Undefined":8,"Tpl":9,"Addr":10,"Block":11,"Function":12,"Rels":13,"Array":14,"Call":15,"Addrget":16,"Assign":17,"~":18,"(":19,")":20,"Id":21,"Reg":22,"@":23,"Relstr":24,".":25,"[":26,"]":27,"{":28,"}":29,"Raws":30,"KeyColon":31,":":32,"FunctionBody":33,"=>":34,"Argdef":35,"Subdefs":36,"Subdef":37,"CallRaw":38,"Op":39,"Class":40,"New":41,"=":42,"+=":43,"!":44,"?":45,"+":46,"-":47,"*":48,"/":49,">=":50,"<=":51,"==":52,"!=":53,">":54,"<":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:",",6:"Number",7:"String",8:"Undefined",9:"Tpl",18:"~",19:"(",20:")",21:"Id",22:"Reg",23:"@",24:"Relstr",25:".",26:"[",27:"]",28:"{",29:"}",32:":",34:"=>",42:"=",43:"+=",44:"!",45:"?",46:"+",47:"-",48:"*",49:"/",50:">=",51:"<=",52:"==",53:"!=",54:">",55:"<"},
productions_: [0,[3,1],[3,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,3],[10,1],[10,1],[10,2],[10,2],[13,1],[16,3],[16,4],[16,4],[16,4],[16,6],[11,2],[11,3],[30,1],[30,1],[30,2],[30,3],[30,2],[31,2],[31,2],[31,2],[12,1],[12,2],[33,2],[33,3],[35,2],[35,3],[35,5],[35,4],[36,1],[36,3],[37,1],[37,2],[15,1],[15,1],[38,3],[38,4],[38,3],[38,4],[40,4],[41,3],[41,4],[17,3],[17,3],[39,2],[39,5],[39,4],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[14,2],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0]
break;
case 2:
return this.$ = $$[$0-1]
break;
case 3:
this.$ = ['obj', 'Number', Number($$[$0])]
break;
case 4:
this.$ = ['obj', 'String', $$[$0]]
break;
case 5:
this.$ = ['obj', 'Undefined']
break;
case 6:
this.$ = ['tpl', $$[$0]]
break;
case 7: case 50: case 51:
this.$ = $$[$0]
break;
case 8:
this.$ = ['block', $$[$0]]
break;
case 9:
this.$ = ['function', $$[$0]]
break;
case 10:
this.$ = ['arr', $$[$0], $$[$0-1]]
break;
case 11:
this.$ = ['arr', $$[$0], []]
break;
case 12:
this.$ = ['brch', $$[$0]]
break;
case 13:
this.$ = ['call', $$[$0]]
break;
case 14:
this.$ = ['call', [['id', 'addrget'], $$[$0]]]
break;
case 15:
this.$ = ['call', [ ['id', 'assign'], $$[$0] ]]
break;
case 16:
this.$ = ['call', [ ['id', 'return'], [$$[$0]] ]]
break;
case 17: case 29: case 34: case 35: case 36: case 37: case 75:
this.$ = $$[$0-1]
break;
case 18:
this.$ = ['id', $$[$0]]
break;
case 19:
this.$ = ['reg', $$[$0]]
break;
case 20: case 21:
this.$ = ['global', $$[$0]]
break;
case 22:
this.$ = $$[$0].split(/\s+/)
break;
case 23:
this.$ = [$$[$0-2], ['obj', 'String', $$[$0]]]
break;
case 24:
this.$ = [$$[$0-3], $$[$0-1]]
break;
case 25:
this.$ = [['obj', 'String', $$[$0-3]], $$[$0-1]]
break;
case 26:
this.$ = [['call', [['id', 'addrget'], $$[$0-3]]], $$[$0-1]]
break;
case 27:
this.$ = [$$[$0-4], $$[$0-1]]
break;
case 28:
this.$= []
break;
case 30:
this.$ = [];
break;
case 31: case 32:
this.$ = [$$[$0]];
break;
case 33:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 38:
this.$= $$[$0];
break;
case 39:
this.$= $$[$0]; this.$[3] = $$[$0-1]
break;
case 40:
this.$ = [['block', $$[$0]]]
break;
case 41:
this.$ = [$$[$0], $$[$0-1]]
break;
case 42:
this.$= [[]]
break;
case 43:
this.$= [$$[$0-1]]
break;
case 44:
this.$= [$$[$0-1], $$[$0-2]]
break;
case 45:
this.$= [[], $$[$0-1]]
break;
case 46:
this.$ = [$$[$0]]; 
break;
case 47:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 48:
this.$ = [$$[$0]]
break;
case 49:
this.$ = [$$[$0-1], $$[$0]]
break;
case 52: case 57:
this.$ = [$$[$0-2], []];
break;
case 53: case 58:
this.$ = [$$[$0-3], $$[$0-1]];
break;
case 54:
this.$ = [['call', $$[$0-2]]];
break;
case 55:
this.$ = [['call', $$[$0-3]], $$[$0-1]];
break;
case 56:
this.$= [$$[$0], $$[$0-1], $$[$0-3]]
break;
case 59:
this.$ = [$$[$0], $$[$0-2]]
break;
case 60:
this.$ = [['call', [ ['id', 'plus'], [$$[$0-2], $$[$0]] ] ], $$[$0-2]]
break;
case 61:
this.$ = [['id', 'not'], [$$[$0]]]
break;
case 62:
this.$ = [['id', 'if'], [$$[$0-4], $$[$0-2], $$[$0]]]
break;
case 63:
this.$ = [['id', 'if'], [$$[$0-3], $$[$0-1]]]
break;
case 64:
this.$ = [['id', 'plus'], [$$[$0-2], $$[$0]]]
break;
case 65:
this.$ = [['id', 'minus'], [$$[$0-2], $$[$0]]]
break;
case 66:
this.$ = [['id', 'times'], [$$[$0-2], $$[$0]]]
break;
case 67:
this.$ = [['id', 'obelus'], [$$[$0-2], $$[$0]]]
break;
case 68:
this.$ = [['id', 'ge'], [$$[$0-2], $$[$0]]]
break;
case 69:
this.$ = [['id', 'le'], [$$[$0-2], $$[$0]]]
break;
case 70:
this.$ = [['id', 'eq'], [$$[$0-2], $$[$0]]]
break;
case 71:
this.$ = [['id', 'ne'], [$$[$0-2], $$[$0]]]
break;
case 72:
this.$ = [['id', 'gt'], [$$[$0-2], $$[$0]]]
break;
case 73:
this.$ = [['id', 'lt'], [$$[$0-2], $$[$0]]]
break;
case 74:
this.$ = []
break;
}
},
table: [{3:1,4:2,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{1:[3]},{1:[2,1],5:[1,28],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($Vr,[2,3]),o($Vr,[2,4],{26:[1,42]}),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,7],{19:[1,45],25:[1,43],26:[1,44]}),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,12],{14:46,26:$Va}),o($Vr,[2,11]),o($Vr,[2,13]),o($Vr,[2,14],{26:[1,47]}),o($Vr,[2,15]),{4:48,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:49,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vs,[2,18],{33:50,34:$Vc}),o($Vs,[2,19]),{7:[1,52],21:[1,51]},{4:56,5:$Vt,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,29:[1,53],30:54,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vr,[2,38]),o($Vu,[2,22]),{4:56,5:$Vt,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,27:[1,57],28:$Vb,30:58,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vr,[2,50],{19:[1,59]}),o($Vr,[2,51]),{11:60,19:[1,62],28:$Vb,35:61},{4:63,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{1:[2,2]},{4:64,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:65,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:66,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:67,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:68,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:69,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:70,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:71,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:72,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:73,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:74,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:75,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:76,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:77,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{21:[1,78]},{4:79,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{4:56,5:$Vt,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,20:[1,80],21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,30:81,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vr,[2,10]),{4:82,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vv,[2,16],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),{20:[1,83],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($Vr,[2,39]),o($Vs,[2,20]),o($Vs,[2,21]),o($Vr,[2,28]),{5:$Vw,29:[1,84]},o($Vx,[2,30],{10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,33:21,38:24,39:25,4:86,6:$V0,7:$V1,8:$V2,9:$V3,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,34:$Vc,44:$Vd}),o($Vx,[2,31],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),o($Vr,[2,74]),{5:$Vw,27:[1,87]},{4:56,5:$Vt,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,20:[1,88],21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,30:89,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vr,[2,40]),{4:90,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},{6:$Vy,7:$Vz,18:[1,93],20:[1,91],21:$VA,31:96,36:92,37:94},o($VB,[2,61],{45:$Vg}),o($Vv,[2,59],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),o($Vv,[2,60],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),{32:[1,99],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($VC,[2,64],{45:$Vg,48:$Vj,49:$Vk}),o($VC,[2,65],{45:$Vg,48:$Vj,49:$Vk}),o($VB,[2,66],{45:$Vg}),o($VB,[2,67],{45:$Vg}),o($VD,[2,68],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk}),o($VD,[2,69],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk}),o($VD,[2,70],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk}),o($VD,[2,71],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk}),o($VD,[2,72],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk}),o($VD,[2,73],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk}),{27:[1,100],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($Vu,[2,23]),{27:[1,101],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($VE,[2,52]),{5:$Vw,20:[1,102]},{27:[1,103],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($Vr,[2,17],{26:[1,104]}),o($Vr,[2,29]),o($Vx,[2,34],{10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,33:21,38:24,39:25,4:105,6:$V0,7:$V1,8:$V2,9:$V3,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,34:$Vc,44:$Vd}),o($Vx,[2,32],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),o($Vr,[2,75]),o($VE,[2,54]),{5:$Vw,20:[1,106]},o($Vv,[2,41],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),o($VF,[2,42]),{5:$VG,20:[1,107]},{21:[1,109]},o($VH,[2,46]),o($VH,[2,48],{32:[1,110]}),{21:[1,111]},{32:[1,112]},{32:[1,113]},o($Vr,[2,63],{10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,33:21,38:24,39:25,4:114,6:$V0,7:$V1,8:$V2,9:$V3,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,34:$Vc,44:$Vd}),o($Vu,[2,25]),o($Vu,[2,24]),o($VE,[2,53]),o($Vu,[2,26]),{4:115,6:$V0,7:$V1,8:$V2,9:$V3,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V4,19:$V5,21:$V6,22:$V7,23:$V8,24:$V9,26:$Va,28:$Vb,33:21,34:$Vc,38:24,39:25,44:$Vd},o($Vx,[2,33],{42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),o($VE,[2,55]),o($VF,[2,43]),{6:$Vy,7:$Vz,21:$VA,31:96,37:116},{6:$Vy,7:$Vz,20:[1,118],21:$VA,31:96,36:117,37:94},{21:[2,35]},o($VH,[2,49]),{21:[2,36]},{21:[2,37]},o($VB,[2,62],{45:$Vg}),{27:[1,119],42:$Ve,43:$Vf,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq},o($VH,[2,47]),{5:$VG,20:[1,120]},o($VF,[2,45]),o($Vu,[2,27]),o($VF,[2,44])],
defaultActions: {28:[2,2],110:[2,35],112:[2,36],113:[2,37]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return;
break;
case 2:return;
break;
case 3:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2).replace('\\`', '`'); return 9;
break;
case 4:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2).replace(/\\u([0-9a-fA-F]{4})/, function(m, n){ return String.fromCharCode(parseInt(n, 16)) }).replace(/\\(.)/g, function(m, n){ if(n == 'n') return '\n';if(n == 'r') return '\r';if(n == 't') return '\t';return n;}); return 7;
break;
case 5:yy_.yytext = yy_.yytext.replace(/^<\s*/, '').replace(/\s*>$/, ''); return 24;
break;
case 6:return
break;
case 7:return 8
break;
case 8:return 21
break;
case 9:yy_.yytext = yy_.yytext.substr(1);return 22
break;
case 10:return 6;
break;
case 11:return 6;
break;
case 12:return 25
break;
case 13:return 34
break;
case 14:return 19
break;
case 15:return 20
break;
case 16:return 26
break;
case 17:return 27
break;
case 18:return 28
break;
case 19:return 29
break;
case 20:return '=?'
break;
case 21:return 50
break;
case 22:return 51
break;
case 23:return 52
break;
case 24:return 53
break;
case 25:return 43
break;
case 26:return '-='
break;
case 27:return '*='
break;
case 28:return '/='
break;
case 29:return '||'
break;
case 30:return '&&'
break;
case 31:return 54
break;
case 32:return 55
break;
case 33:return '&'
break;
case 34:return 23
break;
case 35:return 44
break;
case 36:return 18
break;
case 37:return 42
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return 48
break;
case 41:return 49
break;
case 42:return '%'
break;
case 43:return '^'
break;
case 44:return 25
break;
case 45:return 32
break;
case 46:return 45
break;
case 47:return 5
break;
case 48:return
break;
}
},
rules: [/^(?:\/\*[\S\s]*\*\/)/,/^(?:\#[^\n\r]+[\n\r]*)/,/^(?:\/\/[^\n\r]+[\n\r]*)/,/^(?:`(\\.|[^\\`])*`)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:<[a-zA-Z0-9_\/\s]*>)/,/^(?:\\[\r\n;]+)/,/^(?:\b\_\b)/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9])|\$)*)/,/^(?:\$(([a-zA-Z_])|([0-9])|\$)*)/,/^(?:\b(-?(?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/,/^(?:\b0[xX][a-zA-Z0-9]+\b)/,/^(?:\.)/,/^(?:\=\>)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\=\?)/,/^(?:\>\=)/,/^(?:\<\=)/,/^(?:\=\=)/,/^(?:\!\=)/,/^(?:\+\=)/,/^(?:\-\=)/,/^(?:\*\=)/,/^(?:\/\=)/,/^(?:\|\|)/,/^(?:\&\&)/,/^(?:\>)/,/^(?:\<)/,/^(?:\&)/,/^(?:\@)/,/^(?:\!)/,/^(?:\~)/,/^(?:=)/,/^(?:\+)/,/^(?:\-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\%)/,/^(?:\^)/,/^(?:\.)/,/^(?:\:)/,/^(?:\?)/,/^(?:([\n\r;,]+))/,/^(?:\s)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}