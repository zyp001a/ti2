/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,19],$Va=[1,20],$Vb=[1,18],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,16,17,20,21,24,31,34,36,37,38,39,40,41,42,43,44,45,47],$Vq=[2,2],$Vr=[2,3],$Vs=[1,34],$Vt=[2,6],$Vu=[1,35],$Vv=[2,11],$Vw=[1,45],$Vx=[1,46],$Vy=[1,47],$Vz=[1,51],$VA=[1,74],$VB=[1,73],$VC=[1,72],$VD=[1,75],$VE=[1,80],$VF=[17,21,24,47],$VG=[16,17,21,24,31,34,36,37,38,39,40,41,42,43,44,45,47],$VH=[1,89],$VI=[2,41],$VJ=[1,87],$VK=[1,88],$VL=[1,16,17,20,21,24,47],$VM=[1,16,17,20,21,24,31,34,36,37,40,41,42,43,44,45,47],$VN=[1,16,17,20,21,24,31,34,40,41,42,43,44,45,47],$VO=[1,16,17,18,20,21,24,31,34,36,37,38,39,40,41,42,43,44,45,47],$VP=[5,6,7,8,9,10,16,20,27,33,35,46],$VQ=[17,20,24],$VR=[17,24],$VS=[1,106],$VT=[1,113],$VU=[9,47];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Start":3,"Raw":4,"Number":5,"String":6,"Undefined":7,"Native":8,"Id":9,"@":10,"Addr":11,"Block":12,"Function":13,"Call":14,"Cpt":15,"(":16,")":17,".":18,"KeyCall":19,"{":20,"}":21,"Elements":22,"Element":23,",":24,"KeyColon":25,":":26,"=>":27,"Argdef":28,"Subdefs":29,"Subdef":30,"=":31,"Op":32,"~":33,"+=":34,"!":35,"+":36,"-":37,"*":38,"/":39,">=":40,"<=":41,"==":42,"!=":43,">":44,"<":45,"[":46,"]":47,"Rels":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"Number",6:"String",7:"Undefined",8:"Native",9:"Id",10:"@",16:"(",17:")",18:".",20:"{",21:"}",24:",",26:":",27:"=>",31:"=",33:"~",34:"+=",35:"!",36:"+",37:"-",38:"*",39:"/",40:">=",41:"<=",42:"==",43:"!=",44:">",45:"<",46:"[",47:"]"},
productions_: [0,[3,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,3],[11,3],[11,3],[11,3],[11,5],[19,1],[19,1],[19,1],[19,3],[12,2],[12,3],[22,1],[22,3],[22,2],[25,2],[25,2],[25,2],[23,1],[23,2],[13,2],[13,3],[13,4],[28,2],[28,3],[28,1],[29,1],[29,3],[30,1],[30,3],[30,3],[30,5],[14,3],[14,4],[14,1],[32,2],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[15,2],[15,3],[15,5],[15,6],[48,1],[48,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0]
break;
case 2:
this.$ = ['obj', 'Number', Number($$[$0])]
break;
case 3: case 19: case 20: case 21:
this.$ = ['obj', 'String', $$[$0]]
break;
case 4:
this.$ = ['obj', 'Undefined']
break;
case 5:
this.$ = ['native', $$[$0]]
break;
case 6:
this.$ = ['id', $$[$0]]
break;
case 7:
this.$ = ['local', $$[$0]]
break;
case 8:
this.$ = ['addr', $$[$0]]
break;
case 9:
this.$ = ['block', $$[$0]]
break;
case 10:
this.$ = ['function', $$[$0]]
break;
case 11:
this.$ = ['call', $$[$0]]
break;
case 12:
this.$ = ['cpt', $$[$0]]
break;
case 13:
this.$ = ['brch', $$[$0]]
break;
case 14: case 24: case 27: case 28: case 29: case 30:
this.$ = $$[$0-1]
break;
case 15:
this.$ = [['id', $$[$0-2]], $$[$0]]
break;
case 16:
this.$ = [['obj', 'String', $$[$0-2]], $$[$0]]
break;
case 17:
this.$ = [['addr', $$[$0-2]], $$[$0]]
break;
case 18:
this.$ = [$$[$0-3], $$[$0]]
break;
case 22:
this.$ = ['call', $$[$0-1]]
break;
case 23: case 36:
this.$= []
break;
case 25:
this.$ = []; $$[$0][0] !== undefined?this.$[$$[$0][0]] = $$[$0][1]:this.$.push($$[$0][1])
break;
case 26:
this.$ = $$[$0-2]; $$[$0][0] !== undefined?this.$[$$[$0][0]] = $$[$0][1]:this.$.push($$[$0][1]);
break;
case 31:
this.$ = [,$$[$0]]
break;
case 32:
this.$ = [$$[$0-1], $$[$0]]
break;
case 33: case 41:
this.$ = [$$[$0], []]
break;
case 34:
this.$ = [$$[$0], $$[$0-1]]
break;
case 35:
this.$ = [$$[$0], $$[$0-1], $$[$0-2]]
break;
case 37:
this.$= $$[$0-1]
break;
case 38:
this.$=[];this.$[$$[$0][0]] = $$[$0][1]
break;
case 39:
this.$ = []; this.$[$$[$0][0]] = $$[$0][1]
break;
case 40:
this.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1]
break;
case 42:
this.$ = [$$[$0-2], [$$[$0]]]
break;
case 43:
this.$ = [$$[$0-2], [, $$[$0]]]
break;
case 44:
this.$ = [$$[$0-4], [$$[$0-2], $$[$0]]]
break;
case 45:
this.$ = [$$[$0-2], []];
break;
case 46:
this.$ = [$$[$0-3], $$[$0-1]];
break;
case 47:
this.$ = $$[$0]
break;
case 48:
this.$ = [['id', 'return'], [$$[$0]]]
break;
case 49:
this.$ = [['id', 'assign'], [$$[$0], $$[$0-2]]]
break;
case 50:
this.$ = [['id', 'assign'], [ ['call', [ ['id', 'plus'], [$$[$0-2], $$[$0]] ] ], $$[$0-2]]]
break;
case 51:
this.$ = [['id', 'not'], [$$[$0]]]
break;
case 52:
this.$ = [['id', 'plus'], [$$[$0-2], $$[$0]]]
break;
case 53:
this.$ = [['id', 'minus'], [$$[$0-2], $$[$0]]]
break;
case 54:
this.$ = [['id', 'times'], [$$[$0-2], $$[$0]]]
break;
case 55:
this.$ = [['id', 'obelus'], [$$[$0-2], $$[$0]]]
break;
case 56:
this.$ = [['id', 'ge'], [$$[$0-2], $$[$0]]]
break;
case 57:
this.$ = [['id', 'le'], [$$[$0-2], $$[$0]]]
break;
case 58:
this.$ = [['id', 'eq'], [$$[$0-2], $$[$0]]]
break;
case 59:
this.$ = [['id', 'ne'], [$$[$0-2], $$[$0]]]
break;
case 60:
this.$ = [['id', 'gt'], [$$[$0-2], $$[$0]]]
break;
case 61:
this.$ = [['id', 'lt'], [$$[$0-2], $$[$0]]]
break;
case 62:
this.$ = [[], []]
break;
case 63:
this.$ = [$$[$0-1], []]
break;
case 64:
this.$ = [[], $$[$0-1]]
break;
case 65:
this.$ = [$$[$0-4], $$[$0-1]]
break;
case 66:
this.$ = [$$[$0]]
break;
case 67:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{1:[3]},{1:[2,1],16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo},o($Vp,$Vq),o($Vp,$Vr,{18:$Vs}),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,$Vt,{18:$Vu}),{9:[1,36],15:37,46:$Vb},o($Vp,[2,8],{18:[1,38]}),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,$Vv),o($Vp,[2,12]),{4:39,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:43,5:$Vw,6:$Vx,7:$V2,8:$V3,9:$Vy,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,21:[1,40],22:41,23:42,25:44,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{9:[1,50],12:48,16:$Vz,20:$V7,28:49,30:52},o($Vp,[2,47]),{4:43,5:$Vw,6:$Vx,7:$V2,8:$V3,9:$Vy,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,22:54,23:42,25:44,27:$V8,32:17,33:$V9,35:$Va,46:$Vb,47:[1,53]},{4:55,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:56,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:43,5:$Vw,6:$Vx,7:$V2,8:$V3,9:$Vy,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,17:[1,57],20:$V7,22:58,23:42,25:44,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:59,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:60,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:61,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:62,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:63,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:64,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:65,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:66,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:67,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:68,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:69,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{4:70,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},{5:$VA,6:$VB,9:$VC,16:$VD,19:71},{5:$VA,6:$VB,9:$VC,16:$VD,19:76},o($Vp,[2,7]),o($Vp,[2,13]),{5:$VA,6:$VB,9:$VC,16:$VD,19:77},{16:$Vc,17:[1,78],31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo},o($Vp,[2,23]),{21:[1,79],24:$VE},o($VF,[2,25]),o($VF,[2,31],{16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),{4:81,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},o($VG,$Vq,{26:[1,82]}),o($VG,$Vr,{18:$Vs,26:[1,83]}),o($VG,$Vt,{18:$Vu,26:[1,84]}),o($Vp,[2,33]),{12:85,20:$V7},{9:$VH,16:$Vz,20:$VI,26:$VJ,28:86,30:52,31:$VK},{9:$VH,17:[1,90],29:91,30:92},{20:[2,38]},o($Vp,[2,62],{46:[1,93]}),{24:$VE,47:[1,94]},o([1,17,20,21,24,47],[2,48],{16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($Vp,[2,51]),o($Vp,[2,45]),{17:[1,95],24:$VE},o($VL,[2,49],{31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VL,[2,50],{31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VM,[2,52],{38:$Vh,39:$Vi}),o($VM,[2,53],{38:$Vh,39:$Vi}),o($Vp,[2,54]),o($Vp,[2,55]),o($VN,[2,56],{36:$Vf,37:$Vg,38:$Vh,39:$Vi}),o($VN,[2,57],{36:$Vf,37:$Vg,38:$Vh,39:$Vi}),o($VN,[2,58],{36:$Vf,37:$Vg,38:$Vh,39:$Vi}),o($VN,[2,59],{36:$Vf,37:$Vg,38:$Vh,39:$Vi}),o($VN,[2,60],{36:$Vf,37:$Vg,38:$Vh,39:$Vi}),o($VN,[2,61],{36:$Vf,37:$Vg,38:$Vh,39:$Vi}),o($VO,[2,16]),o($VO,[2,19]),o($VO,[2,20]),o($VO,[2,21]),{4:97,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:96,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},o($VO,[2,15]),o($VO,[2,17]),o($Vp,[2,14],{18:[1,98]}),o($Vp,[2,24]),o($VF,[2,27],{11:9,12:10,13:11,14:12,15:13,32:17,4:43,25:44,23:99,5:$Vw,6:$Vx,7:$V2,8:$V3,9:$Vy,10:$V5,16:$V6,20:$V7,27:$V8,33:$V9,35:$Va,46:$Vb}),o($VF,[2,32],{16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VP,[2,30]),o($VP,[2,29]),o($VP,[2,28]),o($Vp,[2,34]),{12:100,20:$V7},{9:[1,101]},{4:102,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},o($VQ,$VI,{26:$VJ,31:$VK}),{20:[2,36]},{17:[1,103],24:[1,104]},o($VR,[2,39]),{9:$VS,48:105},o($Vp,[2,63],{46:[1,107]}),o($Vp,[2,46]),o([16,31,34,36,37,38,39,40,41,42,43,44,45],$Vv,{17:[1,108]}),{16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo},{5:$VA,6:$VB,9:$VC,16:$VD,19:109},o($VF,[2,26]),o($Vp,[2,35]),o($VQ,[2,42],{31:[1,110]}),o($VQ,[2,43],{16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),{20:[2,37]},{9:$VH,30:111},{9:$VT,47:[1,112]},o($VU,[2,66]),{9:$VS,48:114},o($VO,[2,22]),o($VO,[2,18]),{4:115,5:$V0,6:$V1,7:$V2,8:$V3,9:$V4,10:$V5,11:9,12:10,13:11,14:12,15:13,16:$V6,20:$V7,27:$V8,32:17,33:$V9,35:$Va,46:$Vb},o($VR,[2,40]),o($Vp,[2,64]),o($VU,[2,67]),{9:$VT,47:[1,116]},o($VQ,[2,44],{16:$Vc,31:$Vd,34:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($Vp,[2,65])],
defaultActions: {52:[2,38],90:[2,36],103:[2,37]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return;
break;
case 2:return;
break;
case 3:yy_.yytext = yy_.yytext.replace(/^\s*`/, '').replace(/`\s*$/, ''); return 8;
break;
case 4:yy_.yytext = yy_.yytext.replace(/^\s*"/, '').replace(/"\s*$/, ''); return 6;
break;
case 5:yy_.yytext = yy_.yytext.replace(/^\s*'/, '').replace(/'\s*$/, ''); return 6;
break;
case 6:return
break;
case 7:yy_.yytext = yy_.yytext.replace(/\s/g, '');return 9
break;
case 8:yy_.yytext = yy_.yytext.replace(/\s/g, ''); return 5;
break;
case 9:return 18
break;
case 10:return 27
break;
case 11:return 16
break;
case 12:return 17
break;
case 13:return 46
break;
case 14:return 47
break;
case 15:return 20
break;
case 16:return 21
break;
case 17:return '=?'
break;
case 18:return 40
break;
case 19:return 41
break;
case 20:return 42
break;
case 21:return 43
break;
case 22:return 34
break;
case 23:return '-='
break;
case 24:return '*='
break;
case 25:return '/='
break;
case 26:return '||'
break;
case 27:return '&&'
break;
case 28:return 44
break;
case 29:return 45
break;
case 30:return '&'
break;
case 31:return 10
break;
case 32:return 35
break;
case 33:return 33
break;
case 34:return 31
break;
case 35:return 36
break;
case 36:return 37
break;
case 37:return 38
break;
case 38:return 39
break;
case 39:return '%'
break;
case 40:return '^'
break;
case 41:return 18
break;
case 42:return 26
break;
case 43:return 24
break;
case 44:return 24
break;
case 45:return 7
break;
case 46:return
break;
}
},
rules: [/^(?:\/\*[\S\s]*\*\/)/,/^(?:\#[^\n\r]+[\n\r]*)/,/^(?:\/\/[^\n\r]+[\n\r]*)/,/^(?:`(\.|[^\`])*`)/,/^(?:"(\.|[^\"])*")/,/^(?:'(\.|[^\'])*')/,/^(?:\\[\r\n;]+)/,/^(?:\$?([a-zA-Z_])(([a-zA-Z_])|([0-9])|\/)*)/,/^(?:(-?(?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/,/^(?:\.)/,/^(?:\=\>)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\=\?)/,/^(?:\>\=)/,/^(?:\<\=)/,/^(?:\=\=)/,/^(?:\!\=)/,/^(?:\+\=)/,/^(?:\-\=)/,/^(?:\*\=)/,/^(?:\/\=)/,/^(?:\|\|)/,/^(?:\&\&)/,/^(?:\>)/,/^(?:\<)/,/^(?:\&)/,/^(?:\@)/,/^(?:\!)/,/^(?:\~)/,/^(?:=)/,/^(?:\+)/,/^(?:\-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\%)/,/^(?:\^)/,/^(?:\.)/,/^(?:\:)/,/^(?:,)/,/^(?:;)/,/^(?:\_)/,/^(?:[\n\r ])/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}